    ---===Singleton Pattern===---

    Sometimes it's important for some classes to have exactly one instance. There are many objects we only need one instance
of them and if we, instantiate more than one, we'll run into all sorts of problems like incorrect program behavior,
overuse of resources, or inconsistent results.
    You may require only one object of a class, for example, when you are a creating the context of an application, or a
thread manageable pool, registry settings, a driver to connect to the input or output console etc. More than one object
of that type clearly will cause inconsistency to your program.
    The Singleton Pattern ensures that a class has only one instance, and provides a global point of access to it. However,
although the Singleton is the simplest in terms of its class diagram because there is only one single class, its
implementation is a bit trickier.

    There are some other ways to break the singleton pattern:
1. If the class is Serializable.
2. If it's Clonnable.
3. It can be break by Reflection.
4. And also if, the class is loaded by multiple class loaders.

    You can protect your class from getting instantiated more than once:
1. Implement the readResolve() and writeReplace() methods in your singleton class and return the same object through
   them.
2. You should also implement the clone() method and throw an exception so that the singleton cannot be cloned.
3. An "if condition" inside the constructor can prevent the singleton from getting instantiated more than once using
   reflection.
4. To prevent the singleton getting instantiated from different class loaders, you can implement the getClass() method.
   The above getClass() method associates the classloader with the current thread; if that classloader is null, the method
   uses the same classloader that loaded the singleton class.

    When to use Singleton:
1. There must be exactly one instance of a class, and it must be accessible to clients from a well-known access point.
2. When the sole instance should be extensible by sub-classing, and clients should be able to use an extended instance
without modifying their code.
    Although you can use all these techniques, there is one simple and easier way of creating a singleton class. As of
JDK 1.5, you can create a singleton class using enums. The Enum constants are implicitly static and final and you cannot
change their values once created.
    You will get a compile time error when you attempt to explicitly instantiate an Enum object. As Enum gets loaded
statically, it is thread-safe. The clone method in Enum is final which ensures that enum constants never get cloned.
Enum is inherently serializable, the serialization mechanism ensures that duplicate instances are never created as a
result of deserialization. Instantiation using reflection is also prohibited. These things ensure that no instance of
an enum exists beyond the one defined by the enum constants.


    ---===Abstract Factory Pattern===---

    The Abstract Factory is a design pattern which provides an interface for creating families of related
or dependent objects without specifying their concrete classes. An abstract factory is a class that provides an
interface to produce a family of objects. In Java, it can be implemented using an interface or an abstract class.
    The Abstract Factory pattern is useful when a client object wants to create an instance of one of a suite of
related, dependent classes without having to know which specific concrete class is to be instantiated. Different
concrete factories implement the abstract factory interface. Client objects make use of these concrete factories to
create objects and, therefore, do not need to know which concrete class is actually instantiated.
    The abstract factory is useful for plugging in a different group of objects to alter the behavior of the system.
For each group or family, a concrete factory is implemented that manages the creation of the objects and the
inter-dependencies and consistency requirements between them. Each concrete factory implements the interface of the
abstract factory

    When to use the Abstract Factory:
1. A system should be independent of how its products are created, composed, and represented.
2. A system should be configured with one of multiple families of products.
3. A family of related product objects is designed to be used together, and you need to enforce this constraint.
4. You want to provide a class library of products, and you want to reveal just their interfaces, not their implementations.

    Abstract Factory Pattern in JDK:
- java.util.Calendar#getInstance()
- java.util.Arrays#asList()
- java.util.ResourceBundle#getBundle()
- java.sql.DriverManager#getConnection()
- java.sql.Connection#createStatement()
- java.sql.Statement#executeQuery()
- java.text.NumberFormat#getInstance()


    ---===Builder Pattern===---

    In general, the details of object construction, such as instantiating and initializing the components that make up
the object, are kept within the object, often as part of its constructor. This type of design closely ties the object
construction process with the components that make up the object. This approach is suitable as long as the object under
construction is simple and the object construction process is definite and always produces the same representation of
the object.
    However, this design may not be effective when the object being created is complex and the series of steps
constituting the object creation process can be implemented in different ways, thus producing different representations
of the object. Because the different implementations of the construction process are all kept within the object,
the object can become bulky (construction bloat) and less modular. Subsequently, adding a new implementation or making
changes to an existing implementation requires changes to the existing code.
    Using the Builder pattern, the process of constructing such an object can be designed more effectively. The Builder
pattern suggests moving the construction logic out of the object class to a separate class referred to as a builder
class. There can be more than one such builder classes, each with different implementations for the series of steps to
construct the object. Each builder implementation results in a different representation of the object.
    The intent of the Builder Pattern is to separate the construction of a complex object from its representation, so
that the same construction process can create different representations. This type of separation reduces the object size.
The design turns out to be more modular with each implementation contained in a different builder object. Adding a new
implementation becomes easier. The object construction process becomes independent of the components that make up the
object. This provides more control over the object construction process.
    In terms of implementation, each of the different steps in the construction process can be declared as methods of
a common interface to be implemented by different concrete builders.
    A client object can create an instance of a concrete builder and invoke the set of methods required to construct
different parts of the final object. This approach requires every client object to be aware of the construction logic.
Whenever the construction logic undergoes a change, all client objects need to be modified accordingly.
    The Builder pattern introduces another level of separation that addresses this problem. Instead of having client
objects invoke different builder methods directly, the Builder pattern suggests using a dedicated object referred to as
a Director, which is responsible for invoking different builder methods required for the construction of the final object.
Different client objects can make use of the Director object to create the required object. Once the object is
constructed, the client object can directly request from the builder the fully constructed object. To facilitate this
process, a new method getObject can be declared in the common Builder interface to be implemented by different concrete
builders.
    The new design eliminates the need for a client object to deal with the methods constituting the object construction
process and encapsulates the details of how the object is constructed from the client.

    When to use the Builder Pattern:
1. The algorithm for creating a complex object should be independent of the parts that make up the object and how
   they're assembled.
2. The construction process must allow different representations for the object that's constructed.

    Builder Pattern in JDK:
- java.lang.StringBuilder#append() (unsynchronized)
- java.lang.StringBuffer#append() (synchronized)
- java.nio.ByteBuffer#put() (also on CharBuffer, ShortBuffer, IntBuffer, LongBuffer, FloatBuffer and DoubleBuffer)
- All implementations of java.lang.Appendable


    ---===Strategy Pattern===---

    The Strategy Design Pattern defines a family of algorithms, encapsulating each one, and making them interchangeable.
Strategy lets the algorithm vary independently from the clients that use it.
    The Strategy pattern is useful when there is a set of related algorithms and a client object needs to be able to
dynamically pick and choose an algorithm from this set that suits its current need. The Strategy pattern suggests
keeping the implementation of each of the algorithms in a separate class. Each such algorithm encapsulated in a separate
class is referred to as a strategy. An object that uses a Strategy object is often referred to as a context object.
    With different Strategy objects in place, changing the behavior of a Context object is simply a matter of changing
its Strategy object to the one that implements the required algorithm. To enable a Context object to access different
Strategy objects in a seamless manner, all Strategy objects must be designed to offer the same interface. In the Java
programming language, this can be accomplished by designing each Strategy object either as an implementer of a common
interface or as a subclass of a common abstract class that declares the required common interface.
    Once the group of related algorithms is encapsulated in a set of Strategy classes in a class hierarchy, a client
can choose from among these algorithms by selecting and instantiating an appropriate Strategy class. To alter the
behavior of the context, a client object needs to configure the context with the selected strategy instance. This type
of arrangement completely separates the implementation of an algorithm from the context that uses it. As a result, when
an existing algorithm implementation is changed or a new algorithm is added to the group, both the context and the
client object (that uses the context) remain unaffected.

    When to use the Strategy Design Pattern:
1. Many related classes differ only in their behavior. Strategies provide a way to configure a class with one of many
   behaviors.
2. You need different variants of an algorithm. For example, you might define algorithms reflecting different space/time
   trade-offs. Strategies can be used when these variants are implemented as a class hierarchy of algorithms.
3. An algorithm uses data that clients shouldn't know about. Use the Strategy pattern to avoid exposing complex,
   algorithm-specific data structures.
4. A class defines many behaviors, and these appear as multiple conditional statements in its operations. Instead of
   many conditionals, move related conditional branches into their own Strategy class.

    Strategy Pattern in JDK:
- java.util.Comparator#compare()
- javax.servlet.http.HttpServlet
- javax.servlet.Filter#doFilter()